package index;

import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

/**
 * @author dhabensky <d.khabensky@a1-systems.com>
 */
public class IndexBuilder {

	private File assetDir;
	private File outputDir;
	private String packageName;
	private TypeSpec.Builder result;

	public IndexBuilder(File assetDir, File outputDir, String packageName, String className) {
		this.assetDir = assetDir;
		this.outputDir = outputDir;
		this.packageName = packageName;
		this.result = TypeSpec.classBuilder(className).addModifiers(PUBLIC, FINAL);
	}


	public void build() throws IOException {

		if (assetDir.exists()) {
			if (!assetDir.isDirectory()) {
				throw new IllegalArgumentException(
						String.format("assetDir (%s) is not a directory", assetDir.getAbsolutePath()));
			}

			generateAForDir(assetDir);
		}

		JavaFile finalA = JavaFile.builder(packageName, result.build())
				.addFileComment("Generated by gdx-asset-index gradle plugin. Do not modify!")
				.build();

		finalA.writeTo(outputDir);
	}

	private void generateAForDir(File dir) {
		File[] assets = dir.listFiles();
		List<File> nested = new ArrayList<File>();
		Path root = Paths.get(assetDir.getAbsolutePath());
		Path current = Paths.get(dir.getAbsolutePath());
		Path relative = root.relativize(current);

		String valuePrefix = "";
		if (relative.toString().length() > 0) {
			valuePrefix = (relative.toString() + File.separator).replace(File.separator, "/");
		}
		String namePrefix = valuePrefix.replace("/", "_");

		if (assets != null) {
			for (File asset : assets) {
				if (asset.isFile()) {
					result.addField(
							FieldSpec.builder(
									String.class,
									fieldName(namePrefix + asset.getName()),
									PUBLIC, STATIC, FINAL
							).initializer(String.format("\"%s\"", valuePrefix + asset.getName()))
									.build());
				}
				else if (asset.isDirectory()) {
					nested.add(asset);
				}
			}
			for (File f : nested) {
				generateAForDir(f);
			}
		}
	}

	private static String fieldName(String fileName) {
		int dotIndex = fileName.lastIndexOf(".");
		String name;
		if (dotIndex != -1) {
			name = fileName.substring(0, dotIndex);
		}
		else {
			name = fileName;
		}

		if (!name.matches(NAME_REGEX)) {
			throw new IllegalArgumentException(String.format("%s must match %s", name, NAME_REGEX));
		}
		return name;
	}

	private static final String NAME_REGEX = "[a-z_][a-z0-9_]*";

}
